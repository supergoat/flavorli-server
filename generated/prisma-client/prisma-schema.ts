// Code generated by Prisma (prisma@1.31.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Address {
  id: ID!
  number: String!
  streetName: String!
  city: String!
  postalCode: String!
  restaurant: Restaurant!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  number: String!
  streetName: String!
  city: String!
  postalCode: String!
  restaurant: RestaurantCreateOneWithoutAddressInput!
}

input AddressCreateOneWithoutRestaurantInput {
  create: AddressCreateWithoutRestaurantInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutRestaurantInput {
  id: ID
  number: String!
  streetName: String!
  city: String!
  postalCode: String!
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  streetName_ASC
  streetName_DESC
  city_ASC
  city_DESC
  postalCode_ASC
  postalCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AddressPreviousValues {
  id: ID!
  number: String!
  streetName: String!
  city: String!
  postalCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateInput {
  number: String
  streetName: String
  city: String
  postalCode: String
  restaurant: RestaurantUpdateOneRequiredWithoutAddressInput
}

input AddressUpdateManyMutationInput {
  number: String
  streetName: String
  city: String
  postalCode: String
}

input AddressUpdateOneRequiredWithoutRestaurantInput {
  create: AddressCreateWithoutRestaurantInput
  update: AddressUpdateWithoutRestaurantDataInput
  upsert: AddressUpsertWithoutRestaurantInput
  connect: AddressWhereUniqueInput
}

input AddressUpdateWithoutRestaurantDataInput {
  number: String
  streetName: String
  city: String
  postalCode: String
}

input AddressUpsertWithoutRestaurantInput {
  update: AddressUpdateWithoutRestaurantDataInput!
  create: AddressCreateWithoutRestaurantInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: String
  number_not: String
  number_in: [String!]
  number_not_in: [String!]
  number_lt: String
  number_lte: String
  number_gt: String
  number_gte: String
  number_contains: String
  number_not_contains: String
  number_starts_with: String
  number_not_starts_with: String
  number_ends_with: String
  number_not_ends_with: String
  streetName: String
  streetName_not: String
  streetName_in: [String!]
  streetName_not_in: [String!]
  streetName_lt: String
  streetName_lte: String
  streetName_gt: String
  streetName_gte: String
  streetName_contains: String
  streetName_not_contains: String
  streetName_starts_with: String
  streetName_not_starts_with: String
  streetName_ends_with: String
  streetName_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  postalCode: String
  postalCode_not: String
  postalCode_in: [String!]
  postalCode_not_in: [String!]
  postalCode_lt: String
  postalCode_lte: String
  postalCode_gt: String
  postalCode_gte: String
  postalCode_contains: String
  postalCode_not_contains: String
  postalCode_starts_with: String
  postalCode_not_starts_with: String
  postalCode_ends_with: String
  postalCode_not_ends_with: String
  restaurant: RestaurantWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateMenu {
  count: Int!
}

type AggregateMenuCategory {
  count: Int!
}

type AggregateMenuItem {
  count: Int!
}

type AggregateOpeningTime {
  count: Int!
}

type AggregateOption {
  count: Int!
}

type AggregateOptionItem {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregateOrderItemOption {
  count: Int!
}

type AggregateOrderItemOptionItem {
  count: Int!
}

type AggregatePaymentMethod {
  count: Int!
}

type AggregateRestaurant {
  count: Int!
}

type AggregateServiceTime {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Customer {
  id: ID!
  email: String!
  password: String!
  name: String!
  tel: String!
  customerStripeId: String
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  paymentMethod: PaymentMethod
  createdAt: DateTime
  updatedAt: DateTime
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: ID
  email: String!
  password: String!
  name: String!
  tel: String!
  customerStripeId: String
  orders: OrderCreateManyWithoutCustomerInput
  paymentMethod: PaymentMethodCreateOneWithoutCustomerInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutPaymentMethodInput {
  create: CustomerCreateWithoutPaymentMethodInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutOrdersInput {
  id: ID
  email: String!
  password: String!
  name: String!
  tel: String!
  customerStripeId: String
  paymentMethod: PaymentMethodCreateOneWithoutCustomerInput
}

input CustomerCreateWithoutPaymentMethodInput {
  id: ID
  email: String!
  password: String!
  name: String!
  tel: String!
  customerStripeId: String
  orders: OrderCreateManyWithoutCustomerInput
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  tel_ASC
  tel_DESC
  customerStripeId_ASC
  customerStripeId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  tel: String!
  customerStripeId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateInput {
  email: String
  password: String
  name: String
  tel: String
  customerStripeId: String
  orders: OrderUpdateManyWithoutCustomerInput
  paymentMethod: PaymentMethodUpdateOneWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  email: String
  password: String
  name: String
  tel: String
  customerStripeId: String
}

input CustomerUpdateOneRequiredWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  update: CustomerUpdateWithoutOrdersDataInput
  upsert: CustomerUpsertWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneWithoutPaymentMethodInput {
  create: CustomerCreateWithoutPaymentMethodInput
  update: CustomerUpdateWithoutPaymentMethodDataInput
  upsert: CustomerUpsertWithoutPaymentMethodInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateWithoutOrdersDataInput {
  email: String
  password: String
  name: String
  tel: String
  customerStripeId: String
  paymentMethod: PaymentMethodUpdateOneWithoutCustomerInput
}

input CustomerUpdateWithoutPaymentMethodDataInput {
  email: String
  password: String
  name: String
  tel: String
  customerStripeId: String
  orders: OrderUpdateManyWithoutCustomerInput
}

input CustomerUpsertWithoutOrdersInput {
  update: CustomerUpdateWithoutOrdersDataInput!
  create: CustomerCreateWithoutOrdersInput!
}

input CustomerUpsertWithoutPaymentMethodInput {
  update: CustomerUpdateWithoutPaymentMethodDataInput!
  create: CustomerCreateWithoutPaymentMethodInput!
}

input CustomerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  tel: String
  tel_not: String
  tel_in: [String!]
  tel_not_in: [String!]
  tel_lt: String
  tel_lte: String
  tel_gt: String
  tel_gte: String
  tel_contains: String
  tel_not_contains: String
  tel_starts_with: String
  tel_not_starts_with: String
  tel_ends_with: String
  tel_not_ends_with: String
  customerStripeId: String
  customerStripeId_not: String
  customerStripeId_in: [String!]
  customerStripeId_not_in: [String!]
  customerStripeId_lt: String
  customerStripeId_lte: String
  customerStripeId_gt: String
  customerStripeId_gte: String
  customerStripeId_contains: String
  customerStripeId_not_contains: String
  customerStripeId_starts_with: String
  customerStripeId_not_starts_with: String
  customerStripeId_ends_with: String
  customerStripeId_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  paymentMethod: PaymentMethodWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: ID
  email: String
}

scalar DateTime

scalar Long

type Menu {
  id: ID!
  name: String!
  description: String
  restaurant: Restaurant!
  serviceTimes(where: ServiceTimeWhereInput, orderBy: ServiceTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceTime!]
  categories(where: MenuCategoryWhereInput, orderBy: MenuCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuCategory!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MenuCategory {
  id: ID!
  name: String!
  menu: Menu!
  description: String
  available: Boolean!
  items(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MenuCategoryConnection {
  pageInfo: PageInfo!
  edges: [MenuCategoryEdge]!
  aggregate: AggregateMenuCategory!
}

input MenuCategoryCreateInput {
  id: ID
  name: String!
  menu: MenuCreateOneWithoutCategoriesInput!
  description: String
  available: Boolean
  items: MenuItemCreateManyWithoutCategoryInput
}

input MenuCategoryCreateManyWithoutMenuInput {
  create: [MenuCategoryCreateWithoutMenuInput!]
  connect: [MenuCategoryWhereUniqueInput!]
}

input MenuCategoryCreateOneWithoutItemsInput {
  create: MenuCategoryCreateWithoutItemsInput
  connect: MenuCategoryWhereUniqueInput
}

input MenuCategoryCreateWithoutItemsInput {
  id: ID
  name: String!
  menu: MenuCreateOneWithoutCategoriesInput!
  description: String
  available: Boolean
}

input MenuCategoryCreateWithoutMenuInput {
  id: ID
  name: String!
  description: String
  available: Boolean
  items: MenuItemCreateManyWithoutCategoryInput
}

type MenuCategoryEdge {
  node: MenuCategory!
  cursor: String!
}

enum MenuCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  available_ASC
  available_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MenuCategoryPreviousValues {
  id: ID!
  name: String!
  description: String
  available: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MenuCategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  available: Boolean
  available_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MenuCategoryScalarWhereInput!]
  OR: [MenuCategoryScalarWhereInput!]
  NOT: [MenuCategoryScalarWhereInput!]
}

type MenuCategorySubscriptionPayload {
  mutation: MutationType!
  node: MenuCategory
  updatedFields: [String!]
  previousValues: MenuCategoryPreviousValues
}

input MenuCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MenuCategoryWhereInput
  AND: [MenuCategorySubscriptionWhereInput!]
  OR: [MenuCategorySubscriptionWhereInput!]
  NOT: [MenuCategorySubscriptionWhereInput!]
}

input MenuCategoryUpdateInput {
  name: String
  menu: MenuUpdateOneRequiredWithoutCategoriesInput
  description: String
  available: Boolean
  items: MenuItemUpdateManyWithoutCategoryInput
}

input MenuCategoryUpdateManyDataInput {
  name: String
  description: String
  available: Boolean
}

input MenuCategoryUpdateManyMutationInput {
  name: String
  description: String
  available: Boolean
}

input MenuCategoryUpdateManyWithoutMenuInput {
  create: [MenuCategoryCreateWithoutMenuInput!]
  delete: [MenuCategoryWhereUniqueInput!]
  connect: [MenuCategoryWhereUniqueInput!]
  set: [MenuCategoryWhereUniqueInput!]
  disconnect: [MenuCategoryWhereUniqueInput!]
  update: [MenuCategoryUpdateWithWhereUniqueWithoutMenuInput!]
  upsert: [MenuCategoryUpsertWithWhereUniqueWithoutMenuInput!]
  deleteMany: [MenuCategoryScalarWhereInput!]
  updateMany: [MenuCategoryUpdateManyWithWhereNestedInput!]
}

input MenuCategoryUpdateManyWithWhereNestedInput {
  where: MenuCategoryScalarWhereInput!
  data: MenuCategoryUpdateManyDataInput!
}

input MenuCategoryUpdateOneWithoutItemsInput {
  create: MenuCategoryCreateWithoutItemsInput
  update: MenuCategoryUpdateWithoutItemsDataInput
  upsert: MenuCategoryUpsertWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: MenuCategoryWhereUniqueInput
}

input MenuCategoryUpdateWithoutItemsDataInput {
  name: String
  menu: MenuUpdateOneRequiredWithoutCategoriesInput
  description: String
  available: Boolean
}

input MenuCategoryUpdateWithoutMenuDataInput {
  name: String
  description: String
  available: Boolean
  items: MenuItemUpdateManyWithoutCategoryInput
}

input MenuCategoryUpdateWithWhereUniqueWithoutMenuInput {
  where: MenuCategoryWhereUniqueInput!
  data: MenuCategoryUpdateWithoutMenuDataInput!
}

input MenuCategoryUpsertWithoutItemsInput {
  update: MenuCategoryUpdateWithoutItemsDataInput!
  create: MenuCategoryCreateWithoutItemsInput!
}

input MenuCategoryUpsertWithWhereUniqueWithoutMenuInput {
  where: MenuCategoryWhereUniqueInput!
  update: MenuCategoryUpdateWithoutMenuDataInput!
  create: MenuCategoryCreateWithoutMenuInput!
}

input MenuCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  menu: MenuWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  available: Boolean
  available_not: Boolean
  items_every: MenuItemWhereInput
  items_some: MenuItemWhereInput
  items_none: MenuItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MenuCategoryWhereInput!]
  OR: [MenuCategoryWhereInput!]
  NOT: [MenuCategoryWhereInput!]
}

input MenuCategoryWhereUniqueInput {
  id: ID
}

type MenuConnection {
  pageInfo: PageInfo!
  edges: [MenuEdge]!
  aggregate: AggregateMenu!
}

input MenuCreateInput {
  id: ID
  name: String!
  description: String
  restaurant: RestaurantCreateOneWithoutMenusInput!
  serviceTimes: ServiceTimeCreateManyWithoutMenuInput
  categories: MenuCategoryCreateManyWithoutMenuInput
}

input MenuCreateManyWithoutRestaurantInput {
  create: [MenuCreateWithoutRestaurantInput!]
  connect: [MenuWhereUniqueInput!]
}

input MenuCreateOneWithoutCategoriesInput {
  create: MenuCreateWithoutCategoriesInput
  connect: MenuWhereUniqueInput
}

input MenuCreateOneWithoutServiceTimesInput {
  create: MenuCreateWithoutServiceTimesInput
  connect: MenuWhereUniqueInput
}

input MenuCreateWithoutCategoriesInput {
  id: ID
  name: String!
  description: String
  restaurant: RestaurantCreateOneWithoutMenusInput!
  serviceTimes: ServiceTimeCreateManyWithoutMenuInput
}

input MenuCreateWithoutRestaurantInput {
  id: ID
  name: String!
  description: String
  serviceTimes: ServiceTimeCreateManyWithoutMenuInput
  categories: MenuCategoryCreateManyWithoutMenuInput
}

input MenuCreateWithoutServiceTimesInput {
  id: ID
  name: String!
  description: String
  restaurant: RestaurantCreateOneWithoutMenusInput!
  categories: MenuCategoryCreateManyWithoutMenuInput
}

type MenuEdge {
  node: Menu!
  cursor: String!
}

type MenuItem {
  id: ID!
  name: String
  description: String
  price: String
  image: String
  available: Boolean!
  dietary: [String!]!
  category: MenuCategory
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MenuItemConnection {
  pageInfo: PageInfo!
  edges: [MenuItemEdge]!
  aggregate: AggregateMenuItem!
}

input MenuItemCreatedietaryInput {
  set: [String!]
}

input MenuItemCreateInput {
  id: ID
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemCreatedietaryInput
  category: MenuCategoryCreateOneWithoutItemsInput
  options: OptionCreateManyWithoutMenuItemsInput
}

input MenuItemCreateManyWithoutCategoryInput {
  create: [MenuItemCreateWithoutCategoryInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuItemCreateManyWithoutOptionsInput {
  create: [MenuItemCreateWithoutOptionsInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuItemCreateWithoutCategoryInput {
  id: ID
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemCreatedietaryInput
  options: OptionCreateManyWithoutMenuItemsInput
}

input MenuItemCreateWithoutOptionsInput {
  id: ID
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemCreatedietaryInput
  category: MenuCategoryCreateOneWithoutItemsInput
}

type MenuItemEdge {
  node: MenuItem!
  cursor: String!
}

enum MenuItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  image_ASC
  image_DESC
  available_ASC
  available_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MenuItemPreviousValues {
  id: ID!
  name: String
  description: String
  price: String
  image: String
  available: Boolean!
  dietary: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MenuItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  available: Boolean
  available_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MenuItemScalarWhereInput!]
  OR: [MenuItemScalarWhereInput!]
  NOT: [MenuItemScalarWhereInput!]
}

type MenuItemSubscriptionPayload {
  mutation: MutationType!
  node: MenuItem
  updatedFields: [String!]
  previousValues: MenuItemPreviousValues
}

input MenuItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MenuItemWhereInput
  AND: [MenuItemSubscriptionWhereInput!]
  OR: [MenuItemSubscriptionWhereInput!]
  NOT: [MenuItemSubscriptionWhereInput!]
}

input MenuItemUpdatedietaryInput {
  set: [String!]
}

input MenuItemUpdateInput {
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemUpdatedietaryInput
  category: MenuCategoryUpdateOneWithoutItemsInput
  options: OptionUpdateManyWithoutMenuItemsInput
}

input MenuItemUpdateManyDataInput {
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemUpdatedietaryInput
}

input MenuItemUpdateManyMutationInput {
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemUpdatedietaryInput
}

input MenuItemUpdateManyWithoutCategoryInput {
  create: [MenuItemCreateWithoutCategoryInput!]
  delete: [MenuItemWhereUniqueInput!]
  connect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
}

input MenuItemUpdateManyWithoutOptionsInput {
  create: [MenuItemCreateWithoutOptionsInput!]
  delete: [MenuItemWhereUniqueInput!]
  connect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutOptionsInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutOptionsInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
}

input MenuItemUpdateManyWithWhereNestedInput {
  where: MenuItemScalarWhereInput!
  data: MenuItemUpdateManyDataInput!
}

input MenuItemUpdateWithoutCategoryDataInput {
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemUpdatedietaryInput
  options: OptionUpdateManyWithoutMenuItemsInput
}

input MenuItemUpdateWithoutOptionsDataInput {
  name: String
  description: String
  price: String
  image: String
  available: Boolean
  dietary: MenuItemUpdatedietaryInput
  category: MenuCategoryUpdateOneWithoutItemsInput
}

input MenuItemUpdateWithWhereUniqueWithoutCategoryInput {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateWithoutCategoryDataInput!
}

input MenuItemUpdateWithWhereUniqueWithoutOptionsInput {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateWithoutOptionsDataInput!
}

input MenuItemUpsertWithWhereUniqueWithoutCategoryInput {
  where: MenuItemWhereUniqueInput!
  update: MenuItemUpdateWithoutCategoryDataInput!
  create: MenuItemCreateWithoutCategoryInput!
}

input MenuItemUpsertWithWhereUniqueWithoutOptionsInput {
  where: MenuItemWhereUniqueInput!
  update: MenuItemUpdateWithoutOptionsDataInput!
  create: MenuItemCreateWithoutOptionsInput!
}

input MenuItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  available: Boolean
  available_not: Boolean
  category: MenuCategoryWhereInput
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
}

input MenuItemWhereUniqueInput {
  id: ID
}

enum MenuOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MenuPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MenuScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MenuScalarWhereInput!]
  OR: [MenuScalarWhereInput!]
  NOT: [MenuScalarWhereInput!]
}

type MenuSubscriptionPayload {
  mutation: MutationType!
  node: Menu
  updatedFields: [String!]
  previousValues: MenuPreviousValues
}

input MenuSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MenuWhereInput
  AND: [MenuSubscriptionWhereInput!]
  OR: [MenuSubscriptionWhereInput!]
  NOT: [MenuSubscriptionWhereInput!]
}

input MenuUpdateInput {
  name: String
  description: String
  restaurant: RestaurantUpdateOneRequiredWithoutMenusInput
  serviceTimes: ServiceTimeUpdateManyWithoutMenuInput
  categories: MenuCategoryUpdateManyWithoutMenuInput
}

input MenuUpdateManyDataInput {
  name: String
  description: String
}

input MenuUpdateManyMutationInput {
  name: String
  description: String
}

input MenuUpdateManyWithoutRestaurantInput {
  create: [MenuCreateWithoutRestaurantInput!]
  delete: [MenuWhereUniqueInput!]
  connect: [MenuWhereUniqueInput!]
  set: [MenuWhereUniqueInput!]
  disconnect: [MenuWhereUniqueInput!]
  update: [MenuUpdateWithWhereUniqueWithoutRestaurantInput!]
  upsert: [MenuUpsertWithWhereUniqueWithoutRestaurantInput!]
  deleteMany: [MenuScalarWhereInput!]
  updateMany: [MenuUpdateManyWithWhereNestedInput!]
}

input MenuUpdateManyWithWhereNestedInput {
  where: MenuScalarWhereInput!
  data: MenuUpdateManyDataInput!
}

input MenuUpdateOneRequiredWithoutCategoriesInput {
  create: MenuCreateWithoutCategoriesInput
  update: MenuUpdateWithoutCategoriesDataInput
  upsert: MenuUpsertWithoutCategoriesInput
  connect: MenuWhereUniqueInput
}

input MenuUpdateOneWithoutServiceTimesInput {
  create: MenuCreateWithoutServiceTimesInput
  update: MenuUpdateWithoutServiceTimesDataInput
  upsert: MenuUpsertWithoutServiceTimesInput
  delete: Boolean
  disconnect: Boolean
  connect: MenuWhereUniqueInput
}

input MenuUpdateWithoutCategoriesDataInput {
  name: String
  description: String
  restaurant: RestaurantUpdateOneRequiredWithoutMenusInput
  serviceTimes: ServiceTimeUpdateManyWithoutMenuInput
}

input MenuUpdateWithoutRestaurantDataInput {
  name: String
  description: String
  serviceTimes: ServiceTimeUpdateManyWithoutMenuInput
  categories: MenuCategoryUpdateManyWithoutMenuInput
}

input MenuUpdateWithoutServiceTimesDataInput {
  name: String
  description: String
  restaurant: RestaurantUpdateOneRequiredWithoutMenusInput
  categories: MenuCategoryUpdateManyWithoutMenuInput
}

input MenuUpdateWithWhereUniqueWithoutRestaurantInput {
  where: MenuWhereUniqueInput!
  data: MenuUpdateWithoutRestaurantDataInput!
}

input MenuUpsertWithoutCategoriesInput {
  update: MenuUpdateWithoutCategoriesDataInput!
  create: MenuCreateWithoutCategoriesInput!
}

input MenuUpsertWithoutServiceTimesInput {
  update: MenuUpdateWithoutServiceTimesDataInput!
  create: MenuCreateWithoutServiceTimesInput!
}

input MenuUpsertWithWhereUniqueWithoutRestaurantInput {
  where: MenuWhereUniqueInput!
  update: MenuUpdateWithoutRestaurantDataInput!
  create: MenuCreateWithoutRestaurantInput!
}

input MenuWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  restaurant: RestaurantWhereInput
  serviceTimes_every: ServiceTimeWhereInput
  serviceTimes_some: ServiceTimeWhereInput
  serviceTimes_none: ServiceTimeWhereInput
  categories_every: MenuCategoryWhereInput
  categories_some: MenuCategoryWhereInput
  categories_none: MenuCategoryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MenuWhereInput!]
  OR: [MenuWhereInput!]
  NOT: [MenuWhereInput!]
}

input MenuWhereUniqueInput {
  id: ID
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createMenu(data: MenuCreateInput!): Menu!
  updateMenu(data: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu
  updateManyMenus(data: MenuUpdateManyMutationInput!, where: MenuWhereInput): BatchPayload!
  upsertMenu(where: MenuWhereUniqueInput!, create: MenuCreateInput!, update: MenuUpdateInput!): Menu!
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteManyMenus(where: MenuWhereInput): BatchPayload!
  createMenuCategory(data: MenuCategoryCreateInput!): MenuCategory!
  updateMenuCategory(data: MenuCategoryUpdateInput!, where: MenuCategoryWhereUniqueInput!): MenuCategory
  updateManyMenuCategories(data: MenuCategoryUpdateManyMutationInput!, where: MenuCategoryWhereInput): BatchPayload!
  upsertMenuCategory(where: MenuCategoryWhereUniqueInput!, create: MenuCategoryCreateInput!, update: MenuCategoryUpdateInput!): MenuCategory!
  deleteMenuCategory(where: MenuCategoryWhereUniqueInput!): MenuCategory
  deleteManyMenuCategories(where: MenuCategoryWhereInput): BatchPayload!
  createMenuItem(data: MenuItemCreateInput!): MenuItem!
  updateMenuItem(data: MenuItemUpdateInput!, where: MenuItemWhereUniqueInput!): MenuItem
  updateManyMenuItems(data: MenuItemUpdateManyMutationInput!, where: MenuItemWhereInput): BatchPayload!
  upsertMenuItem(where: MenuItemWhereUniqueInput!, create: MenuItemCreateInput!, update: MenuItemUpdateInput!): MenuItem!
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteManyMenuItems(where: MenuItemWhereInput): BatchPayload!
  createOpeningTime(data: OpeningTimeCreateInput!): OpeningTime!
  updateOpeningTime(data: OpeningTimeUpdateInput!, where: OpeningTimeWhereUniqueInput!): OpeningTime
  updateManyOpeningTimes(data: OpeningTimeUpdateManyMutationInput!, where: OpeningTimeWhereInput): BatchPayload!
  upsertOpeningTime(where: OpeningTimeWhereUniqueInput!, create: OpeningTimeCreateInput!, update: OpeningTimeUpdateInput!): OpeningTime!
  deleteOpeningTime(where: OpeningTimeWhereUniqueInput!): OpeningTime
  deleteManyOpeningTimes(where: OpeningTimeWhereInput): BatchPayload!
  createOption(data: OptionCreateInput!): Option!
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateManyOptions(data: OptionUpdateManyMutationInput!, where: OptionWhereInput): BatchPayload!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteManyOptions(where: OptionWhereInput): BatchPayload!
  createOptionItem(data: OptionItemCreateInput!): OptionItem!
  updateOptionItem(data: OptionItemUpdateInput!, where: OptionItemWhereUniqueInput!): OptionItem
  updateManyOptionItems(data: OptionItemUpdateManyMutationInput!, where: OptionItemWhereInput): BatchPayload!
  upsertOptionItem(where: OptionItemWhereUniqueInput!, create: OptionItemCreateInput!, update: OptionItemUpdateInput!): OptionItem!
  deleteOptionItem(where: OptionItemWhereUniqueInput!): OptionItem
  deleteManyOptionItems(where: OptionItemWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  upsertOrderItem(where: OrderItemWhereUniqueInput!, create: OrderItemCreateInput!, update: OrderItemUpdateInput!): OrderItem!
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  createOrderItemOption(data: OrderItemOptionCreateInput!): OrderItemOption!
  updateOrderItemOption(data: OrderItemOptionUpdateInput!, where: OrderItemOptionWhereUniqueInput!): OrderItemOption
  updateManyOrderItemOptions(data: OrderItemOptionUpdateManyMutationInput!, where: OrderItemOptionWhereInput): BatchPayload!
  upsertOrderItemOption(where: OrderItemOptionWhereUniqueInput!, create: OrderItemOptionCreateInput!, update: OrderItemOptionUpdateInput!): OrderItemOption!
  deleteOrderItemOption(where: OrderItemOptionWhereUniqueInput!): OrderItemOption
  deleteManyOrderItemOptions(where: OrderItemOptionWhereInput): BatchPayload!
  createOrderItemOptionItem(data: OrderItemOptionItemCreateInput!): OrderItemOptionItem!
  updateOrderItemOptionItem(data: OrderItemOptionItemUpdateInput!, where: OrderItemOptionItemWhereUniqueInput!): OrderItemOptionItem
  updateManyOrderItemOptionItems(data: OrderItemOptionItemUpdateManyMutationInput!, where: OrderItemOptionItemWhereInput): BatchPayload!
  upsertOrderItemOptionItem(where: OrderItemOptionItemWhereUniqueInput!, create: OrderItemOptionItemCreateInput!, update: OrderItemOptionItemUpdateInput!): OrderItemOptionItem!
  deleteOrderItemOptionItem(where: OrderItemOptionItemWhereUniqueInput!): OrderItemOptionItem
  deleteManyOrderItemOptionItems(where: OrderItemOptionItemWhereInput): BatchPayload!
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod!
  updatePaymentMethod(data: PaymentMethodUpdateInput!, where: PaymentMethodWhereUniqueInput!): PaymentMethod
  updateManyPaymentMethods(data: PaymentMethodUpdateManyMutationInput!, where: PaymentMethodWhereInput): BatchPayload!
  upsertPaymentMethod(where: PaymentMethodWhereUniqueInput!, create: PaymentMethodCreateInput!, update: PaymentMethodUpdateInput!): PaymentMethod!
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deleteManyPaymentMethods(where: PaymentMethodWhereInput): BatchPayload!
  createRestaurant(data: RestaurantCreateInput!): Restaurant!
  updateRestaurant(data: RestaurantUpdateInput!, where: RestaurantWhereUniqueInput!): Restaurant
  updateManyRestaurants(data: RestaurantUpdateManyMutationInput!, where: RestaurantWhereInput): BatchPayload!
  upsertRestaurant(where: RestaurantWhereUniqueInput!, create: RestaurantCreateInput!, update: RestaurantUpdateInput!): Restaurant!
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteManyRestaurants(where: RestaurantWhereInput): BatchPayload!
  createServiceTime(data: ServiceTimeCreateInput!): ServiceTime!
  updateServiceTime(data: ServiceTimeUpdateInput!, where: ServiceTimeWhereUniqueInput!): ServiceTime
  updateManyServiceTimes(data: ServiceTimeUpdateManyMutationInput!, where: ServiceTimeWhereInput): BatchPayload!
  upsertServiceTime(where: ServiceTimeWhereUniqueInput!, create: ServiceTimeCreateInput!, update: ServiceTimeUpdateInput!): ServiceTime!
  deleteServiceTime(where: ServiceTimeWhereUniqueInput!): ServiceTime
  deleteManyServiceTimes(where: ServiceTimeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OpeningTime {
  id: ID!
  hours: [String!]!
  days: [String!]!
  restaurant: Restaurant
}

type OpeningTimeConnection {
  pageInfo: PageInfo!
  edges: [OpeningTimeEdge]!
  aggregate: AggregateOpeningTime!
}

input OpeningTimeCreatedaysInput {
  set: [String!]
}

input OpeningTimeCreatehoursInput {
  set: [String!]
}

input OpeningTimeCreateInput {
  id: ID
  hours: OpeningTimeCreatehoursInput
  days: OpeningTimeCreatedaysInput
  restaurant: RestaurantCreateOneWithoutOpeningTimesInput
}

input OpeningTimeCreateManyWithoutRestaurantInput {
  create: [OpeningTimeCreateWithoutRestaurantInput!]
  connect: [OpeningTimeWhereUniqueInput!]
}

input OpeningTimeCreateWithoutRestaurantInput {
  id: ID
  hours: OpeningTimeCreatehoursInput
  days: OpeningTimeCreatedaysInput
}

type OpeningTimeEdge {
  node: OpeningTime!
  cursor: String!
}

enum OpeningTimeOrderByInput {
  id_ASC
  id_DESC
}

type OpeningTimePreviousValues {
  id: ID!
  hours: [String!]!
  days: [String!]!
}

input OpeningTimeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [OpeningTimeScalarWhereInput!]
  OR: [OpeningTimeScalarWhereInput!]
  NOT: [OpeningTimeScalarWhereInput!]
}

type OpeningTimeSubscriptionPayload {
  mutation: MutationType!
  node: OpeningTime
  updatedFields: [String!]
  previousValues: OpeningTimePreviousValues
}

input OpeningTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OpeningTimeWhereInput
  AND: [OpeningTimeSubscriptionWhereInput!]
  OR: [OpeningTimeSubscriptionWhereInput!]
  NOT: [OpeningTimeSubscriptionWhereInput!]
}

input OpeningTimeUpdatedaysInput {
  set: [String!]
}

input OpeningTimeUpdatehoursInput {
  set: [String!]
}

input OpeningTimeUpdateInput {
  hours: OpeningTimeUpdatehoursInput
  days: OpeningTimeUpdatedaysInput
  restaurant: RestaurantUpdateOneWithoutOpeningTimesInput
}

input OpeningTimeUpdateManyDataInput {
  hours: OpeningTimeUpdatehoursInput
  days: OpeningTimeUpdatedaysInput
}

input OpeningTimeUpdateManyMutationInput {
  hours: OpeningTimeUpdatehoursInput
  days: OpeningTimeUpdatedaysInput
}

input OpeningTimeUpdateManyWithoutRestaurantInput {
  create: [OpeningTimeCreateWithoutRestaurantInput!]
  delete: [OpeningTimeWhereUniqueInput!]
  connect: [OpeningTimeWhereUniqueInput!]
  set: [OpeningTimeWhereUniqueInput!]
  disconnect: [OpeningTimeWhereUniqueInput!]
  update: [OpeningTimeUpdateWithWhereUniqueWithoutRestaurantInput!]
  upsert: [OpeningTimeUpsertWithWhereUniqueWithoutRestaurantInput!]
  deleteMany: [OpeningTimeScalarWhereInput!]
  updateMany: [OpeningTimeUpdateManyWithWhereNestedInput!]
}

input OpeningTimeUpdateManyWithWhereNestedInput {
  where: OpeningTimeScalarWhereInput!
  data: OpeningTimeUpdateManyDataInput!
}

input OpeningTimeUpdateWithoutRestaurantDataInput {
  hours: OpeningTimeUpdatehoursInput
  days: OpeningTimeUpdatedaysInput
}

input OpeningTimeUpdateWithWhereUniqueWithoutRestaurantInput {
  where: OpeningTimeWhereUniqueInput!
  data: OpeningTimeUpdateWithoutRestaurantDataInput!
}

input OpeningTimeUpsertWithWhereUniqueWithoutRestaurantInput {
  where: OpeningTimeWhereUniqueInput!
  update: OpeningTimeUpdateWithoutRestaurantDataInput!
  create: OpeningTimeCreateWithoutRestaurantInput!
}

input OpeningTimeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurant: RestaurantWhereInput
  AND: [OpeningTimeWhereInput!]
  OR: [OpeningTimeWhereInput!]
  NOT: [OpeningTimeWhereInput!]
}

input OpeningTimeWhereUniqueInput {
  id: ID
}

type Option {
  id: ID!
  name: String!
  min: String!
  max: String!
  items(where: OptionItemWhereInput, orderBy: OptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionItem!]
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem!]
  restaurant: Restaurant
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OptionConnection {
  pageInfo: PageInfo!
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  id: ID
  name: String!
  min: String!
  max: String!
  items: OptionItemCreateManyWithoutOptionInput
  menuItems: MenuItemCreateManyWithoutOptionsInput
  restaurant: RestaurantCreateOneInput
}

input OptionCreateManyWithoutMenuItemsInput {
  create: [OptionCreateWithoutMenuItemsInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneWithoutItemsInput {
  create: OptionCreateWithoutItemsInput
  connect: OptionWhereUniqueInput
}

input OptionCreateWithoutItemsInput {
  id: ID
  name: String!
  min: String!
  max: String!
  menuItems: MenuItemCreateManyWithoutOptionsInput
  restaurant: RestaurantCreateOneInput
}

input OptionCreateWithoutMenuItemsInput {
  id: ID
  name: String!
  min: String!
  max: String!
  items: OptionItemCreateManyWithoutOptionInput
  restaurant: RestaurantCreateOneInput
}

type OptionEdge {
  node: Option!
  cursor: String!
}

type OptionItem {
  id: ID!
  name: String!
  price: String!
  option: Option
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OptionItemConnection {
  pageInfo: PageInfo!
  edges: [OptionItemEdge]!
  aggregate: AggregateOptionItem!
}

input OptionItemCreateInput {
  id: ID
  name: String!
  price: String!
  option: OptionCreateOneWithoutItemsInput
}

input OptionItemCreateManyWithoutOptionInput {
  create: [OptionItemCreateWithoutOptionInput!]
  connect: [OptionItemWhereUniqueInput!]
}

input OptionItemCreateWithoutOptionInput {
  id: ID
  name: String!
  price: String!
}

type OptionItemEdge {
  node: OptionItem!
  cursor: String!
}

enum OptionItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OptionItemPreviousValues {
  id: ID!
  name: String!
  price: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OptionItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OptionItemScalarWhereInput!]
  OR: [OptionItemScalarWhereInput!]
  NOT: [OptionItemScalarWhereInput!]
}

type OptionItemSubscriptionPayload {
  mutation: MutationType!
  node: OptionItem
  updatedFields: [String!]
  previousValues: OptionItemPreviousValues
}

input OptionItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OptionItemWhereInput
  AND: [OptionItemSubscriptionWhereInput!]
  OR: [OptionItemSubscriptionWhereInput!]
  NOT: [OptionItemSubscriptionWhereInput!]
}

input OptionItemUpdateInput {
  name: String
  price: String
  option: OptionUpdateOneWithoutItemsInput
}

input OptionItemUpdateManyDataInput {
  name: String
  price: String
}

input OptionItemUpdateManyMutationInput {
  name: String
  price: String
}

input OptionItemUpdateManyWithoutOptionInput {
  create: [OptionItemCreateWithoutOptionInput!]
  delete: [OptionItemWhereUniqueInput!]
  connect: [OptionItemWhereUniqueInput!]
  set: [OptionItemWhereUniqueInput!]
  disconnect: [OptionItemWhereUniqueInput!]
  update: [OptionItemUpdateWithWhereUniqueWithoutOptionInput!]
  upsert: [OptionItemUpsertWithWhereUniqueWithoutOptionInput!]
  deleteMany: [OptionItemScalarWhereInput!]
  updateMany: [OptionItemUpdateManyWithWhereNestedInput!]
}

input OptionItemUpdateManyWithWhereNestedInput {
  where: OptionItemScalarWhereInput!
  data: OptionItemUpdateManyDataInput!
}

input OptionItemUpdateWithoutOptionDataInput {
  name: String
  price: String
}

input OptionItemUpdateWithWhereUniqueWithoutOptionInput {
  where: OptionItemWhereUniqueInput!
  data: OptionItemUpdateWithoutOptionDataInput!
}

input OptionItemUpsertWithWhereUniqueWithoutOptionInput {
  where: OptionItemWhereUniqueInput!
  update: OptionItemUpdateWithoutOptionDataInput!
  create: OptionItemCreateWithoutOptionInput!
}

input OptionItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  option: OptionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OptionItemWhereInput!]
  OR: [OptionItemWhereInput!]
  NOT: [OptionItemWhereInput!]
}

input OptionItemWhereUniqueInput {
  id: ID
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  min_ASC
  min_DESC
  max_ASC
  max_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OptionPreviousValues {
  id: ID!
  name: String!
  min: String!
  max: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  min: String
  min_not: String
  min_in: [String!]
  min_not_in: [String!]
  min_lt: String
  min_lte: String
  min_gt: String
  min_gte: String
  min_contains: String
  min_not_contains: String
  min_starts_with: String
  min_not_starts_with: String
  min_ends_with: String
  min_not_ends_with: String
  max: String
  max_not: String
  max_in: [String!]
  max_not_in: [String!]
  max_lt: String
  max_lte: String
  max_gt: String
  max_gte: String
  max_contains: String
  max_not_contains: String
  max_starts_with: String
  max_not_starts_with: String
  max_ends_with: String
  max_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OptionScalarWhereInput!]
  OR: [OptionScalarWhereInput!]
  NOT: [OptionScalarWhereInput!]
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
  AND: [OptionSubscriptionWhereInput!]
  OR: [OptionSubscriptionWhereInput!]
  NOT: [OptionSubscriptionWhereInput!]
}

input OptionUpdateInput {
  name: String
  min: String
  max: String
  items: OptionItemUpdateManyWithoutOptionInput
  menuItems: MenuItemUpdateManyWithoutOptionsInput
  restaurant: RestaurantUpdateOneInput
}

input OptionUpdateManyDataInput {
  name: String
  min: String
  max: String
}

input OptionUpdateManyMutationInput {
  name: String
  min: String
  max: String
}

input OptionUpdateManyWithoutMenuItemsInput {
  create: [OptionCreateWithoutMenuItemsInput!]
  delete: [OptionWhereUniqueInput!]
  connect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutMenuItemsInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutMenuItemsInput!]
  deleteMany: [OptionScalarWhereInput!]
  updateMany: [OptionUpdateManyWithWhereNestedInput!]
}

input OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput!
  data: OptionUpdateManyDataInput!
}

input OptionUpdateOneWithoutItemsInput {
  create: OptionCreateWithoutItemsInput
  update: OptionUpdateWithoutItemsDataInput
  upsert: OptionUpsertWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: OptionWhereUniqueInput
}

input OptionUpdateWithoutItemsDataInput {
  name: String
  min: String
  max: String
  menuItems: MenuItemUpdateManyWithoutOptionsInput
  restaurant: RestaurantUpdateOneInput
}

input OptionUpdateWithoutMenuItemsDataInput {
  name: String
  min: String
  max: String
  items: OptionItemUpdateManyWithoutOptionInput
  restaurant: RestaurantUpdateOneInput
}

input OptionUpdateWithWhereUniqueWithoutMenuItemsInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateWithoutMenuItemsDataInput!
}

input OptionUpsertWithoutItemsInput {
  update: OptionUpdateWithoutItemsDataInput!
  create: OptionCreateWithoutItemsInput!
}

input OptionUpsertWithWhereUniqueWithoutMenuItemsInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateWithoutMenuItemsDataInput!
  create: OptionCreateWithoutMenuItemsInput!
}

input OptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  min: String
  min_not: String
  min_in: [String!]
  min_not_in: [String!]
  min_lt: String
  min_lte: String
  min_gt: String
  min_gte: String
  min_contains: String
  min_not_contains: String
  min_starts_with: String
  min_not_starts_with: String
  min_ends_with: String
  min_not_ends_with: String
  max: String
  max_not: String
  max_in: [String!]
  max_not_in: [String!]
  max_lt: String
  max_lte: String
  max_gt: String
  max_gte: String
  max_contains: String
  max_not_contains: String
  max_starts_with: String
  max_not_starts_with: String
  max_ends_with: String
  max_not_ends_with: String
  items_every: OptionItemWhereInput
  items_some: OptionItemWhereInput
  items_none: OptionItemWhereInput
  menuItems_every: MenuItemWhereInput
  menuItems_some: MenuItemWhereInput
  menuItems_none: MenuItemWhereInput
  restaurant: RestaurantWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
}

input OptionWhereUniqueInput {
  id: ID
}

type Order {
  id: ID!
  orderNo: Int!
  paymentIntentId: String
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  dueAt: DateTime!
  delayedBy: Int
  restaurant: Restaurant!
  customer: Customer!
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  total: String!
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  orderNo: Int!
  paymentIntentId: String
  status: String
  dueAt: DateTime!
  delayedBy: Int
  restaurant: RestaurantCreateOneInput!
  customer: CustomerCreateOneWithoutOrdersInput!
  items: OrderItemCreateManyWithoutOrderInput
  total: String!
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderCreateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCustomerInput {
  id: ID
  orderNo: Int!
  paymentIntentId: String
  status: String
  dueAt: DateTime!
  delayedBy: Int
  restaurant: RestaurantCreateOneInput!
  items: OrderItemCreateManyWithoutOrderInput
  total: String!
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderCreateWithoutItemsInput {
  id: ID
  orderNo: Int!
  paymentIntentId: String
  status: String
  dueAt: DateTime!
  delayedBy: Int
  restaurant: RestaurantCreateOneInput!
  customer: CustomerCreateOneWithoutOrdersInput!
  total: String!
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderItem {
  id: ID!
  name: String!
  price: String
  image: String
  quantity: Int
  options(where: OrderItemOptionWhereInput, orderBy: OrderItemOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItemOption!]
  order: Order!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderItemConnection {
  pageInfo: PageInfo!
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  id: ID
  name: String!
  price: String
  image: String
  quantity: Int
  options: OrderItemOptionCreateManyWithoutOrderItemInput
  order: OrderCreateOneWithoutItemsInput!
}

input OrderItemCreateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateOneWithoutOptionsInput {
  create: OrderItemCreateWithoutOptionsInput
  connect: OrderItemWhereUniqueInput
}

input OrderItemCreateWithoutOptionsInput {
  id: ID
  name: String!
  price: String
  image: String
  quantity: Int
  order: OrderCreateOneWithoutItemsInput!
}

input OrderItemCreateWithoutOrderInput {
  id: ID
  name: String!
  price: String
  image: String
  quantity: Int
  options: OrderItemOptionCreateManyWithoutOrderItemInput
}

type OrderItemEdge {
  node: OrderItem!
  cursor: String!
}

type OrderItemOption {
  id: ID!
  name: String!
  items(where: OrderItemOptionItemWhereInput, orderBy: OrderItemOptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItemOptionItem!]
  orderItem: OrderItem!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderItemOptionConnection {
  pageInfo: PageInfo!
  edges: [OrderItemOptionEdge]!
  aggregate: AggregateOrderItemOption!
}

input OrderItemOptionCreateInput {
  id: ID
  name: String!
  items: OrderItemOptionItemCreateManyWithoutOptionInput
  orderItem: OrderItemCreateOneWithoutOptionsInput!
}

input OrderItemOptionCreateManyWithoutOrderItemInput {
  create: [OrderItemOptionCreateWithoutOrderItemInput!]
  connect: [OrderItemOptionWhereUniqueInput!]
}

input OrderItemOptionCreateOneWithoutItemsInput {
  create: OrderItemOptionCreateWithoutItemsInput
  connect: OrderItemOptionWhereUniqueInput
}

input OrderItemOptionCreateWithoutItemsInput {
  id: ID
  name: String!
  orderItem: OrderItemCreateOneWithoutOptionsInput!
}

input OrderItemOptionCreateWithoutOrderItemInput {
  id: ID
  name: String!
  items: OrderItemOptionItemCreateManyWithoutOptionInput
}

type OrderItemOptionEdge {
  node: OrderItemOption!
  cursor: String!
}

type OrderItemOptionItem {
  id: ID!
  name: String!
  price: String!
  option: OrderItemOption
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderItemOptionItemConnection {
  pageInfo: PageInfo!
  edges: [OrderItemOptionItemEdge]!
  aggregate: AggregateOrderItemOptionItem!
}

input OrderItemOptionItemCreateInput {
  id: ID
  name: String!
  price: String!
  option: OrderItemOptionCreateOneWithoutItemsInput
}

input OrderItemOptionItemCreateManyWithoutOptionInput {
  create: [OrderItemOptionItemCreateWithoutOptionInput!]
  connect: [OrderItemOptionItemWhereUniqueInput!]
}

input OrderItemOptionItemCreateWithoutOptionInput {
  id: ID
  name: String!
  price: String!
}

type OrderItemOptionItemEdge {
  node: OrderItemOptionItem!
  cursor: String!
}

enum OrderItemOptionItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderItemOptionItemPreviousValues {
  id: ID!
  name: String!
  price: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderItemOptionItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderItemOptionItemScalarWhereInput!]
  OR: [OrderItemOptionItemScalarWhereInput!]
  NOT: [OrderItemOptionItemScalarWhereInput!]
}

type OrderItemOptionItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItemOptionItem
  updatedFields: [String!]
  previousValues: OrderItemOptionItemPreviousValues
}

input OrderItemOptionItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderItemOptionItemWhereInput
  AND: [OrderItemOptionItemSubscriptionWhereInput!]
  OR: [OrderItemOptionItemSubscriptionWhereInput!]
  NOT: [OrderItemOptionItemSubscriptionWhereInput!]
}

input OrderItemOptionItemUpdateInput {
  name: String
  price: String
  option: OrderItemOptionUpdateOneWithoutItemsInput
}

input OrderItemOptionItemUpdateManyDataInput {
  name: String
  price: String
}

input OrderItemOptionItemUpdateManyMutationInput {
  name: String
  price: String
}

input OrderItemOptionItemUpdateManyWithoutOptionInput {
  create: [OrderItemOptionItemCreateWithoutOptionInput!]
  delete: [OrderItemOptionItemWhereUniqueInput!]
  connect: [OrderItemOptionItemWhereUniqueInput!]
  set: [OrderItemOptionItemWhereUniqueInput!]
  disconnect: [OrderItemOptionItemWhereUniqueInput!]
  update: [OrderItemOptionItemUpdateWithWhereUniqueWithoutOptionInput!]
  upsert: [OrderItemOptionItemUpsertWithWhereUniqueWithoutOptionInput!]
  deleteMany: [OrderItemOptionItemScalarWhereInput!]
  updateMany: [OrderItemOptionItemUpdateManyWithWhereNestedInput!]
}

input OrderItemOptionItemUpdateManyWithWhereNestedInput {
  where: OrderItemOptionItemScalarWhereInput!
  data: OrderItemOptionItemUpdateManyDataInput!
}

input OrderItemOptionItemUpdateWithoutOptionDataInput {
  name: String
  price: String
}

input OrderItemOptionItemUpdateWithWhereUniqueWithoutOptionInput {
  where: OrderItemOptionItemWhereUniqueInput!
  data: OrderItemOptionItemUpdateWithoutOptionDataInput!
}

input OrderItemOptionItemUpsertWithWhereUniqueWithoutOptionInput {
  where: OrderItemOptionItemWhereUniqueInput!
  update: OrderItemOptionItemUpdateWithoutOptionDataInput!
  create: OrderItemOptionItemCreateWithoutOptionInput!
}

input OrderItemOptionItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  option: OrderItemOptionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderItemOptionItemWhereInput!]
  OR: [OrderItemOptionItemWhereInput!]
  NOT: [OrderItemOptionItemWhereInput!]
}

input OrderItemOptionItemWhereUniqueInput {
  id: ID
}

enum OrderItemOptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderItemOptionPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderItemOptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderItemOptionScalarWhereInput!]
  OR: [OrderItemOptionScalarWhereInput!]
  NOT: [OrderItemOptionScalarWhereInput!]
}

type OrderItemOptionSubscriptionPayload {
  mutation: MutationType!
  node: OrderItemOption
  updatedFields: [String!]
  previousValues: OrderItemOptionPreviousValues
}

input OrderItemOptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderItemOptionWhereInput
  AND: [OrderItemOptionSubscriptionWhereInput!]
  OR: [OrderItemOptionSubscriptionWhereInput!]
  NOT: [OrderItemOptionSubscriptionWhereInput!]
}

input OrderItemOptionUpdateInput {
  name: String
  items: OrderItemOptionItemUpdateManyWithoutOptionInput
  orderItem: OrderItemUpdateOneRequiredWithoutOptionsInput
}

input OrderItemOptionUpdateManyDataInput {
  name: String
}

input OrderItemOptionUpdateManyMutationInput {
  name: String
}

input OrderItemOptionUpdateManyWithoutOrderItemInput {
  create: [OrderItemOptionCreateWithoutOrderItemInput!]
  delete: [OrderItemOptionWhereUniqueInput!]
  connect: [OrderItemOptionWhereUniqueInput!]
  set: [OrderItemOptionWhereUniqueInput!]
  disconnect: [OrderItemOptionWhereUniqueInput!]
  update: [OrderItemOptionUpdateWithWhereUniqueWithoutOrderItemInput!]
  upsert: [OrderItemOptionUpsertWithWhereUniqueWithoutOrderItemInput!]
  deleteMany: [OrderItemOptionScalarWhereInput!]
  updateMany: [OrderItemOptionUpdateManyWithWhereNestedInput!]
}

input OrderItemOptionUpdateManyWithWhereNestedInput {
  where: OrderItemOptionScalarWhereInput!
  data: OrderItemOptionUpdateManyDataInput!
}

input OrderItemOptionUpdateOneWithoutItemsInput {
  create: OrderItemOptionCreateWithoutItemsInput
  update: OrderItemOptionUpdateWithoutItemsDataInput
  upsert: OrderItemOptionUpsertWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: OrderItemOptionWhereUniqueInput
}

input OrderItemOptionUpdateWithoutItemsDataInput {
  name: String
  orderItem: OrderItemUpdateOneRequiredWithoutOptionsInput
}

input OrderItemOptionUpdateWithoutOrderItemDataInput {
  name: String
  items: OrderItemOptionItemUpdateManyWithoutOptionInput
}

input OrderItemOptionUpdateWithWhereUniqueWithoutOrderItemInput {
  where: OrderItemOptionWhereUniqueInput!
  data: OrderItemOptionUpdateWithoutOrderItemDataInput!
}

input OrderItemOptionUpsertWithoutItemsInput {
  update: OrderItemOptionUpdateWithoutItemsDataInput!
  create: OrderItemOptionCreateWithoutItemsInput!
}

input OrderItemOptionUpsertWithWhereUniqueWithoutOrderItemInput {
  where: OrderItemOptionWhereUniqueInput!
  update: OrderItemOptionUpdateWithoutOrderItemDataInput!
  create: OrderItemOptionCreateWithoutOrderItemInput!
}

input OrderItemOptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  items_every: OrderItemOptionItemWhereInput
  items_some: OrderItemOptionItemWhereInput
  items_none: OrderItemOptionItemWhereInput
  orderItem: OrderItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderItemOptionWhereInput!]
  OR: [OrderItemOptionWhereInput!]
  NOT: [OrderItemOptionWhereInput!]
}

input OrderItemOptionWhereUniqueInput {
  id: ID
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  image_ASC
  image_DESC
  quantity_ASC
  quantity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderItemPreviousValues {
  id: ID!
  name: String!
  price: String
  image: String
  quantity: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  NOT: [OrderItemScalarWhereInput!]
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
  AND: [OrderItemSubscriptionWhereInput!]
  OR: [OrderItemSubscriptionWhereInput!]
  NOT: [OrderItemSubscriptionWhereInput!]
}

input OrderItemUpdateInput {
  name: String
  price: String
  image: String
  quantity: Int
  options: OrderItemOptionUpdateManyWithoutOrderItemInput
  order: OrderUpdateOneRequiredWithoutItemsInput
}

input OrderItemUpdateManyDataInput {
  name: String
  price: String
  image: String
  quantity: Int
}

input OrderItemUpdateManyMutationInput {
  name: String
  price: String
  image: String
  quantity: Int
}

input OrderItemUpdateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  delete: [OrderItemWhereUniqueInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput!
  data: OrderItemUpdateManyDataInput!
}

input OrderItemUpdateOneRequiredWithoutOptionsInput {
  create: OrderItemCreateWithoutOptionsInput
  update: OrderItemUpdateWithoutOptionsDataInput
  upsert: OrderItemUpsertWithoutOptionsInput
  connect: OrderItemWhereUniqueInput
}

input OrderItemUpdateWithoutOptionsDataInput {
  name: String
  price: String
  image: String
  quantity: Int
  order: OrderUpdateOneRequiredWithoutItemsInput
}

input OrderItemUpdateWithoutOrderDataInput {
  name: String
  price: String
  image: String
  quantity: Int
  options: OrderItemOptionUpdateManyWithoutOrderItemInput
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateWithoutOrderDataInput!
}

input OrderItemUpsertWithoutOptionsInput {
  update: OrderItemUpdateWithoutOptionsDataInput!
  create: OrderItemCreateWithoutOptionsInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  create: OrderItemCreateWithoutOrderInput!
}

input OrderItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  options_every: OrderItemOptionWhereInput
  options_some: OrderItemOptionWhereInput
  options_none: OrderItemOptionWhereInput
  order: OrderWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  orderNo_ASC
  orderNo_DESC
  paymentIntentId_ASC
  paymentIntentId_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  dueAt_ASC
  dueAt_DESC
  delayedBy_ASC
  delayedBy_DESC
  total_ASC
  total_DESC
  priceAdjustment_ASC
  priceAdjustment_DESC
  cancelReason_ASC
  cancelReason_DESC
  priceAdjustmentReason_ASC
  priceAdjustmentReason_DESC
}

type OrderPreviousValues {
  id: ID!
  orderNo: Int!
  paymentIntentId: String
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  dueAt: DateTime!
  delayedBy: Int
  total: String!
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  orderNo: Int
  orderNo_not: Int
  orderNo_in: [Int!]
  orderNo_not_in: [Int!]
  orderNo_lt: Int
  orderNo_lte: Int
  orderNo_gt: Int
  orderNo_gte: Int
  paymentIntentId: String
  paymentIntentId_not: String
  paymentIntentId_in: [String!]
  paymentIntentId_not_in: [String!]
  paymentIntentId_lt: String
  paymentIntentId_lte: String
  paymentIntentId_gt: String
  paymentIntentId_gte: String
  paymentIntentId_contains: String
  paymentIntentId_not_contains: String
  paymentIntentId_starts_with: String
  paymentIntentId_not_starts_with: String
  paymentIntentId_ends_with: String
  paymentIntentId_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  dueAt: DateTime
  dueAt_not: DateTime
  dueAt_in: [DateTime!]
  dueAt_not_in: [DateTime!]
  dueAt_lt: DateTime
  dueAt_lte: DateTime
  dueAt_gt: DateTime
  dueAt_gte: DateTime
  delayedBy: Int
  delayedBy_not: Int
  delayedBy_in: [Int!]
  delayedBy_not_in: [Int!]
  delayedBy_lt: Int
  delayedBy_lte: Int
  delayedBy_gt: Int
  delayedBy_gte: Int
  total: String
  total_not: String
  total_in: [String!]
  total_not_in: [String!]
  total_lt: String
  total_lte: String
  total_gt: String
  total_gte: String
  total_contains: String
  total_not_contains: String
  total_starts_with: String
  total_not_starts_with: String
  total_ends_with: String
  total_not_ends_with: String
  priceAdjustment: String
  priceAdjustment_not: String
  priceAdjustment_in: [String!]
  priceAdjustment_not_in: [String!]
  priceAdjustment_lt: String
  priceAdjustment_lte: String
  priceAdjustment_gt: String
  priceAdjustment_gte: String
  priceAdjustment_contains: String
  priceAdjustment_not_contains: String
  priceAdjustment_starts_with: String
  priceAdjustment_not_starts_with: String
  priceAdjustment_ends_with: String
  priceAdjustment_not_ends_with: String
  cancelReason: String
  cancelReason_not: String
  cancelReason_in: [String!]
  cancelReason_not_in: [String!]
  cancelReason_lt: String
  cancelReason_lte: String
  cancelReason_gt: String
  cancelReason_gte: String
  cancelReason_contains: String
  cancelReason_not_contains: String
  cancelReason_starts_with: String
  cancelReason_not_starts_with: String
  cancelReason_ends_with: String
  cancelReason_not_ends_with: String
  priceAdjustmentReason: String
  priceAdjustmentReason_not: String
  priceAdjustmentReason_in: [String!]
  priceAdjustmentReason_not_in: [String!]
  priceAdjustmentReason_lt: String
  priceAdjustmentReason_lte: String
  priceAdjustmentReason_gt: String
  priceAdjustmentReason_gte: String
  priceAdjustmentReason_contains: String
  priceAdjustmentReason_not_contains: String
  priceAdjustmentReason_starts_with: String
  priceAdjustmentReason_not_starts_with: String
  priceAdjustmentReason_ends_with: String
  priceAdjustmentReason_not_ends_with: String
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  orderNo: Int
  paymentIntentId: String
  status: String
  dueAt: DateTime
  delayedBy: Int
  restaurant: RestaurantUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  items: OrderItemUpdateManyWithoutOrderInput
  total: String
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderUpdateManyDataInput {
  orderNo: Int
  paymentIntentId: String
  status: String
  dueAt: DateTime
  delayedBy: Int
  total: String
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderUpdateManyMutationInput {
  orderNo: Int
  paymentIntentId: String
  status: String
  dueAt: DateTime
  delayedBy: Int
  total: String
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderUpdateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateOneRequiredWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  update: OrderUpdateWithoutItemsDataInput
  upsert: OrderUpsertWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateWithoutCustomerDataInput {
  orderNo: Int
  paymentIntentId: String
  status: String
  dueAt: DateTime
  delayedBy: Int
  restaurant: RestaurantUpdateOneRequiredInput
  items: OrderItemUpdateManyWithoutOrderInput
  total: String
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderUpdateWithoutItemsDataInput {
  orderNo: Int
  paymentIntentId: String
  status: String
  dueAt: DateTime
  delayedBy: Int
  restaurant: RestaurantUpdateOneRequiredInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  total: String
  priceAdjustment: String
  cancelReason: String
  priceAdjustmentReason: String
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCustomerDataInput!
}

input OrderUpsertWithoutItemsInput {
  update: OrderUpdateWithoutItemsDataInput!
  create: OrderCreateWithoutItemsInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCustomerDataInput!
  create: OrderCreateWithoutCustomerInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  orderNo: Int
  orderNo_not: Int
  orderNo_in: [Int!]
  orderNo_not_in: [Int!]
  orderNo_lt: Int
  orderNo_lte: Int
  orderNo_gt: Int
  orderNo_gte: Int
  paymentIntentId: String
  paymentIntentId_not: String
  paymentIntentId_in: [String!]
  paymentIntentId_not_in: [String!]
  paymentIntentId_lt: String
  paymentIntentId_lte: String
  paymentIntentId_gt: String
  paymentIntentId_gte: String
  paymentIntentId_contains: String
  paymentIntentId_not_contains: String
  paymentIntentId_starts_with: String
  paymentIntentId_not_starts_with: String
  paymentIntentId_ends_with: String
  paymentIntentId_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  dueAt: DateTime
  dueAt_not: DateTime
  dueAt_in: [DateTime!]
  dueAt_not_in: [DateTime!]
  dueAt_lt: DateTime
  dueAt_lte: DateTime
  dueAt_gt: DateTime
  dueAt_gte: DateTime
  delayedBy: Int
  delayedBy_not: Int
  delayedBy_in: [Int!]
  delayedBy_not_in: [Int!]
  delayedBy_lt: Int
  delayedBy_lte: Int
  delayedBy_gt: Int
  delayedBy_gte: Int
  restaurant: RestaurantWhereInput
  customer: CustomerWhereInput
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  total: String
  total_not: String
  total_in: [String!]
  total_not_in: [String!]
  total_lt: String
  total_lte: String
  total_gt: String
  total_gte: String
  total_contains: String
  total_not_contains: String
  total_starts_with: String
  total_not_starts_with: String
  total_ends_with: String
  total_not_ends_with: String
  priceAdjustment: String
  priceAdjustment_not: String
  priceAdjustment_in: [String!]
  priceAdjustment_not_in: [String!]
  priceAdjustment_lt: String
  priceAdjustment_lte: String
  priceAdjustment_gt: String
  priceAdjustment_gte: String
  priceAdjustment_contains: String
  priceAdjustment_not_contains: String
  priceAdjustment_starts_with: String
  priceAdjustment_not_starts_with: String
  priceAdjustment_ends_with: String
  priceAdjustment_not_ends_with: String
  cancelReason: String
  cancelReason_not: String
  cancelReason_in: [String!]
  cancelReason_not_in: [String!]
  cancelReason_lt: String
  cancelReason_lte: String
  cancelReason_gt: String
  cancelReason_gte: String
  cancelReason_contains: String
  cancelReason_not_contains: String
  cancelReason_starts_with: String
  cancelReason_not_starts_with: String
  cancelReason_ends_with: String
  cancelReason_not_ends_with: String
  priceAdjustmentReason: String
  priceAdjustmentReason_not: String
  priceAdjustmentReason_in: [String!]
  priceAdjustmentReason_not_in: [String!]
  priceAdjustmentReason_lt: String
  priceAdjustmentReason_lte: String
  priceAdjustmentReason_gt: String
  priceAdjustmentReason_gte: String
  priceAdjustmentReason_contains: String
  priceAdjustmentReason_not_contains: String
  priceAdjustmentReason_starts_with: String
  priceAdjustmentReason_not_starts_with: String
  priceAdjustmentReason_ends_with: String
  priceAdjustmentReason_not_ends_with: String
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PaymentMethod {
  id: ID!
  payment_method_id: String!
  brand: String!
  last4: String!
  customer: Customer
}

type PaymentMethodConnection {
  pageInfo: PageInfo!
  edges: [PaymentMethodEdge]!
  aggregate: AggregatePaymentMethod!
}

input PaymentMethodCreateInput {
  id: ID
  payment_method_id: String!
  brand: String!
  last4: String!
  customer: CustomerCreateOneWithoutPaymentMethodInput
}

input PaymentMethodCreateOneWithoutCustomerInput {
  create: PaymentMethodCreateWithoutCustomerInput
  connect: PaymentMethodWhereUniqueInput
}

input PaymentMethodCreateWithoutCustomerInput {
  id: ID
  payment_method_id: String!
  brand: String!
  last4: String!
}

type PaymentMethodEdge {
  node: PaymentMethod!
  cursor: String!
}

enum PaymentMethodOrderByInput {
  id_ASC
  id_DESC
  payment_method_id_ASC
  payment_method_id_DESC
  brand_ASC
  brand_DESC
  last4_ASC
  last4_DESC
}

type PaymentMethodPreviousValues {
  id: ID!
  payment_method_id: String!
  brand: String!
  last4: String!
}

type PaymentMethodSubscriptionPayload {
  mutation: MutationType!
  node: PaymentMethod
  updatedFields: [String!]
  previousValues: PaymentMethodPreviousValues
}

input PaymentMethodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentMethodWhereInput
  AND: [PaymentMethodSubscriptionWhereInput!]
  OR: [PaymentMethodSubscriptionWhereInput!]
  NOT: [PaymentMethodSubscriptionWhereInput!]
}

input PaymentMethodUpdateInput {
  payment_method_id: String
  brand: String
  last4: String
  customer: CustomerUpdateOneWithoutPaymentMethodInput
}

input PaymentMethodUpdateManyMutationInput {
  payment_method_id: String
  brand: String
  last4: String
}

input PaymentMethodUpdateOneWithoutCustomerInput {
  create: PaymentMethodCreateWithoutCustomerInput
  update: PaymentMethodUpdateWithoutCustomerDataInput
  upsert: PaymentMethodUpsertWithoutCustomerInput
  delete: Boolean
  disconnect: Boolean
  connect: PaymentMethodWhereUniqueInput
}

input PaymentMethodUpdateWithoutCustomerDataInput {
  payment_method_id: String
  brand: String
  last4: String
}

input PaymentMethodUpsertWithoutCustomerInput {
  update: PaymentMethodUpdateWithoutCustomerDataInput!
  create: PaymentMethodCreateWithoutCustomerInput!
}

input PaymentMethodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  payment_method_id: String
  payment_method_id_not: String
  payment_method_id_in: [String!]
  payment_method_id_not_in: [String!]
  payment_method_id_lt: String
  payment_method_id_lte: String
  payment_method_id_gt: String
  payment_method_id_gte: String
  payment_method_id_contains: String
  payment_method_id_not_contains: String
  payment_method_id_starts_with: String
  payment_method_id_not_starts_with: String
  payment_method_id_ends_with: String
  payment_method_id_not_ends_with: String
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  last4: String
  last4_not: String
  last4_in: [String!]
  last4_not_in: [String!]
  last4_lt: String
  last4_lte: String
  last4_gt: String
  last4_gte: String
  last4_contains: String
  last4_not_contains: String
  last4_starts_with: String
  last4_not_starts_with: String
  last4_ends_with: String
  last4_not_ends_with: String
  customer: CustomerWhereInput
  AND: [PaymentMethodWhereInput!]
  OR: [PaymentMethodWhereInput!]
  NOT: [PaymentMethodWhereInput!]
}

input PaymentMethodWhereUniqueInput {
  id: ID
  payment_method_id: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  menu(where: MenuWhereUniqueInput!): Menu
  menus(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Menu]!
  menusConnection(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuConnection!
  menuCategory(where: MenuCategoryWhereUniqueInput!): MenuCategory
  menuCategories(where: MenuCategoryWhereInput, orderBy: MenuCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuCategory]!
  menuCategoriesConnection(where: MenuCategoryWhereInput, orderBy: MenuCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuCategoryConnection!
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem]!
  menuItemsConnection(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuItemConnection!
  openingTime(where: OpeningTimeWhereUniqueInput!): OpeningTime
  openingTimes(where: OpeningTimeWhereInput, orderBy: OpeningTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpeningTime]!
  openingTimesConnection(where: OpeningTimeWhereInput, orderBy: OpeningTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OpeningTimeConnection!
  option(where: OptionWhereUniqueInput!): Option
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  optionItem(where: OptionItemWhereUniqueInput!): OptionItem
  optionItems(where: OptionItemWhereInput, orderBy: OptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionItem]!
  optionItemsConnection(where: OptionItemWhereInput, orderBy: OptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionItemConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!
  orderItemsConnection(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemConnection!
  orderItemOption(where: OrderItemOptionWhereUniqueInput!): OrderItemOption
  orderItemOptions(where: OrderItemOptionWhereInput, orderBy: OrderItemOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItemOption]!
  orderItemOptionsConnection(where: OrderItemOptionWhereInput, orderBy: OrderItemOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemOptionConnection!
  orderItemOptionItem(where: OrderItemOptionItemWhereUniqueInput!): OrderItemOptionItem
  orderItemOptionItems(where: OrderItemOptionItemWhereInput, orderBy: OrderItemOptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItemOptionItem]!
  orderItemOptionItemsConnection(where: OrderItemOptionItemWhereInput, orderBy: OrderItemOptionItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemOptionItemConnection!
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  paymentMethods(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentMethod]!
  paymentMethodsConnection(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentMethodConnection!
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  restaurants(where: RestaurantWhereInput, orderBy: RestaurantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurant]!
  restaurantsConnection(where: RestaurantWhereInput, orderBy: RestaurantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantConnection!
  serviceTime(where: ServiceTimeWhereUniqueInput!): ServiceTime
  serviceTimes(where: ServiceTimeWhereInput, orderBy: ServiceTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceTime]!
  serviceTimesConnection(where: ServiceTimeWhereInput, orderBy: ServiceTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceTimeConnection!
  node(id: ID!): Node
}

type Restaurant {
  id: ID!
  name: String!
  email: String!
  password: String!
  address: Address!
  tel: String!
  image: String
  logo: String
  description: String
  status: String
  tags: [String!]!
  openingTimes(where: OpeningTimeWhereInput, orderBy: OpeningTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpeningTime!]
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Menu!]
  isConnected: Boolean!
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RestaurantConnection {
  pageInfo: PageInfo!
  edges: [RestaurantEdge]!
  aggregate: AggregateRestaurant!
}

input RestaurantCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  address: AddressCreateOneWithoutRestaurantInput!
  tel: String!
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantCreatetagsInput
  openingTimes: OpeningTimeCreateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuCreateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantCreateOneInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateOneWithoutAddressInput {
  create: RestaurantCreateWithoutAddressInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateOneWithoutMenusInput {
  create: RestaurantCreateWithoutMenusInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateOneWithoutOpeningTimesInput {
  create: RestaurantCreateWithoutOpeningTimesInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreatetagsInput {
  set: [String!]
}

input RestaurantCreateWithoutAddressInput {
  id: ID
  name: String!
  email: String!
  password: String!
  tel: String!
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantCreatetagsInput
  openingTimes: OpeningTimeCreateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuCreateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantCreateWithoutMenusInput {
  id: ID
  name: String!
  email: String!
  password: String!
  address: AddressCreateOneWithoutRestaurantInput!
  tel: String!
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantCreatetagsInput
  openingTimes: OpeningTimeCreateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantCreateWithoutOpeningTimesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  address: AddressCreateOneWithoutRestaurantInput!
  tel: String!
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantCreatetagsInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuCreateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

type RestaurantEdge {
  node: Restaurant!
  cursor: String!
}

enum RestaurantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  tel_ASC
  tel_DESC
  image_ASC
  image_DESC
  logo_ASC
  logo_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  averageBusyPreparationTime_ASC
  averageBusyPreparationTime_DESC
  averagePreparationTime_ASC
  averagePreparationTime_DESC
  isConnected_ASC
  isConnected_DESC
  stripe_user_id_ASC
  stripe_user_id_DESC
  stripe_publishable_key_ASC
  stripe_publishable_key_DESC
  access_token_ASC
  access_token_DESC
  refresh_token_ASC
  refresh_token_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RestaurantPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  tel: String!
  image: String
  logo: String
  description: String
  status: String
  tags: [String!]!
  averageBusyPreparationTime: String
  averagePreparationTime: String
  isConnected: Boolean!
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RestaurantSubscriptionPayload {
  mutation: MutationType!
  node: Restaurant
  updatedFields: [String!]
  previousValues: RestaurantPreviousValues
}

input RestaurantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RestaurantWhereInput
  AND: [RestaurantSubscriptionWhereInput!]
  OR: [RestaurantSubscriptionWhereInput!]
  NOT: [RestaurantSubscriptionWhereInput!]
}

input RestaurantUpdateDataInput {
  name: String
  email: String
  password: String
  address: AddressUpdateOneRequiredWithoutRestaurantInput
  tel: String
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantUpdatetagsInput
  openingTimes: OpeningTimeUpdateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuUpdateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantUpdateInput {
  name: String
  email: String
  password: String
  address: AddressUpdateOneRequiredWithoutRestaurantInput
  tel: String
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantUpdatetagsInput
  openingTimes: OpeningTimeUpdateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuUpdateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantUpdateManyMutationInput {
  name: String
  email: String
  password: String
  tel: String
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantUpdatetagsInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantUpdateOneInput {
  create: RestaurantCreateInput
  update: RestaurantUpdateDataInput
  upsert: RestaurantUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantWhereUniqueInput
}

input RestaurantUpdateOneRequiredInput {
  create: RestaurantCreateInput
  update: RestaurantUpdateDataInput
  upsert: RestaurantUpsertNestedInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantUpdateOneRequiredWithoutAddressInput {
  create: RestaurantCreateWithoutAddressInput
  update: RestaurantUpdateWithoutAddressDataInput
  upsert: RestaurantUpsertWithoutAddressInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantUpdateOneRequiredWithoutMenusInput {
  create: RestaurantCreateWithoutMenusInput
  update: RestaurantUpdateWithoutMenusDataInput
  upsert: RestaurantUpsertWithoutMenusInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantUpdateOneWithoutOpeningTimesInput {
  create: RestaurantCreateWithoutOpeningTimesInput
  update: RestaurantUpdateWithoutOpeningTimesDataInput
  upsert: RestaurantUpsertWithoutOpeningTimesInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantWhereUniqueInput
}

input RestaurantUpdatetagsInput {
  set: [String!]
}

input RestaurantUpdateWithoutAddressDataInput {
  name: String
  email: String
  password: String
  tel: String
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantUpdatetagsInput
  openingTimes: OpeningTimeUpdateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuUpdateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantUpdateWithoutMenusDataInput {
  name: String
  email: String
  password: String
  address: AddressUpdateOneRequiredWithoutRestaurantInput
  tel: String
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantUpdatetagsInput
  openingTimes: OpeningTimeUpdateManyWithoutRestaurantInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantUpdateWithoutOpeningTimesDataInput {
  name: String
  email: String
  password: String
  address: AddressUpdateOneRequiredWithoutRestaurantInput
  tel: String
  image: String
  logo: String
  description: String
  status: String
  tags: RestaurantUpdatetagsInput
  averageBusyPreparationTime: String
  averagePreparationTime: String
  menus: MenuUpdateManyWithoutRestaurantInput
  isConnected: Boolean
  stripe_user_id: String
  stripe_publishable_key: String
  access_token: String
  refresh_token: String
}

input RestaurantUpsertNestedInput {
  update: RestaurantUpdateDataInput!
  create: RestaurantCreateInput!
}

input RestaurantUpsertWithoutAddressInput {
  update: RestaurantUpdateWithoutAddressDataInput!
  create: RestaurantCreateWithoutAddressInput!
}

input RestaurantUpsertWithoutMenusInput {
  update: RestaurantUpdateWithoutMenusDataInput!
  create: RestaurantCreateWithoutMenusInput!
}

input RestaurantUpsertWithoutOpeningTimesInput {
  update: RestaurantUpdateWithoutOpeningTimesDataInput!
  create: RestaurantCreateWithoutOpeningTimesInput!
}

input RestaurantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  address: AddressWhereInput
  tel: String
  tel_not: String
  tel_in: [String!]
  tel_not_in: [String!]
  tel_lt: String
  tel_lte: String
  tel_gt: String
  tel_gte: String
  tel_contains: String
  tel_not_contains: String
  tel_starts_with: String
  tel_not_starts_with: String
  tel_ends_with: String
  tel_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  openingTimes_every: OpeningTimeWhereInput
  openingTimes_some: OpeningTimeWhereInput
  openingTimes_none: OpeningTimeWhereInput
  averageBusyPreparationTime: String
  averageBusyPreparationTime_not: String
  averageBusyPreparationTime_in: [String!]
  averageBusyPreparationTime_not_in: [String!]
  averageBusyPreparationTime_lt: String
  averageBusyPreparationTime_lte: String
  averageBusyPreparationTime_gt: String
  averageBusyPreparationTime_gte: String
  averageBusyPreparationTime_contains: String
  averageBusyPreparationTime_not_contains: String
  averageBusyPreparationTime_starts_with: String
  averageBusyPreparationTime_not_starts_with: String
  averageBusyPreparationTime_ends_with: String
  averageBusyPreparationTime_not_ends_with: String
  averagePreparationTime: String
  averagePreparationTime_not: String
  averagePreparationTime_in: [String!]
  averagePreparationTime_not_in: [String!]
  averagePreparationTime_lt: String
  averagePreparationTime_lte: String
  averagePreparationTime_gt: String
  averagePreparationTime_gte: String
  averagePreparationTime_contains: String
  averagePreparationTime_not_contains: String
  averagePreparationTime_starts_with: String
  averagePreparationTime_not_starts_with: String
  averagePreparationTime_ends_with: String
  averagePreparationTime_not_ends_with: String
  menus_every: MenuWhereInput
  menus_some: MenuWhereInput
  menus_none: MenuWhereInput
  isConnected: Boolean
  isConnected_not: Boolean
  stripe_user_id: String
  stripe_user_id_not: String
  stripe_user_id_in: [String!]
  stripe_user_id_not_in: [String!]
  stripe_user_id_lt: String
  stripe_user_id_lte: String
  stripe_user_id_gt: String
  stripe_user_id_gte: String
  stripe_user_id_contains: String
  stripe_user_id_not_contains: String
  stripe_user_id_starts_with: String
  stripe_user_id_not_starts_with: String
  stripe_user_id_ends_with: String
  stripe_user_id_not_ends_with: String
  stripe_publishable_key: String
  stripe_publishable_key_not: String
  stripe_publishable_key_in: [String!]
  stripe_publishable_key_not_in: [String!]
  stripe_publishable_key_lt: String
  stripe_publishable_key_lte: String
  stripe_publishable_key_gt: String
  stripe_publishable_key_gte: String
  stripe_publishable_key_contains: String
  stripe_publishable_key_not_contains: String
  stripe_publishable_key_starts_with: String
  stripe_publishable_key_not_starts_with: String
  stripe_publishable_key_ends_with: String
  stripe_publishable_key_not_ends_with: String
  access_token: String
  access_token_not: String
  access_token_in: [String!]
  access_token_not_in: [String!]
  access_token_lt: String
  access_token_lte: String
  access_token_gt: String
  access_token_gte: String
  access_token_contains: String
  access_token_not_contains: String
  access_token_starts_with: String
  access_token_not_starts_with: String
  access_token_ends_with: String
  access_token_not_ends_with: String
  refresh_token: String
  refresh_token_not: String
  refresh_token_in: [String!]
  refresh_token_not_in: [String!]
  refresh_token_lt: String
  refresh_token_lte: String
  refresh_token_gt: String
  refresh_token_gte: String
  refresh_token_contains: String
  refresh_token_not_contains: String
  refresh_token_starts_with: String
  refresh_token_not_starts_with: String
  refresh_token_ends_with: String
  refresh_token_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RestaurantWhereInput!]
  OR: [RestaurantWhereInput!]
  NOT: [RestaurantWhereInput!]
}

input RestaurantWhereUniqueInput {
  id: ID
  email: String
}

type ServiceTime {
  id: ID!
  hours: [String!]!
  days: [String!]!
  menu: Menu
}

type ServiceTimeConnection {
  pageInfo: PageInfo!
  edges: [ServiceTimeEdge]!
  aggregate: AggregateServiceTime!
}

input ServiceTimeCreatedaysInput {
  set: [String!]
}

input ServiceTimeCreatehoursInput {
  set: [String!]
}

input ServiceTimeCreateInput {
  id: ID
  hours: ServiceTimeCreatehoursInput
  days: ServiceTimeCreatedaysInput
  menu: MenuCreateOneWithoutServiceTimesInput
}

input ServiceTimeCreateManyWithoutMenuInput {
  create: [ServiceTimeCreateWithoutMenuInput!]
  connect: [ServiceTimeWhereUniqueInput!]
}

input ServiceTimeCreateWithoutMenuInput {
  id: ID
  hours: ServiceTimeCreatehoursInput
  days: ServiceTimeCreatedaysInput
}

type ServiceTimeEdge {
  node: ServiceTime!
  cursor: String!
}

enum ServiceTimeOrderByInput {
  id_ASC
  id_DESC
}

type ServiceTimePreviousValues {
  id: ID!
  hours: [String!]!
  days: [String!]!
}

input ServiceTimeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ServiceTimeScalarWhereInput!]
  OR: [ServiceTimeScalarWhereInput!]
  NOT: [ServiceTimeScalarWhereInput!]
}

type ServiceTimeSubscriptionPayload {
  mutation: MutationType!
  node: ServiceTime
  updatedFields: [String!]
  previousValues: ServiceTimePreviousValues
}

input ServiceTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceTimeWhereInput
  AND: [ServiceTimeSubscriptionWhereInput!]
  OR: [ServiceTimeSubscriptionWhereInput!]
  NOT: [ServiceTimeSubscriptionWhereInput!]
}

input ServiceTimeUpdatedaysInput {
  set: [String!]
}

input ServiceTimeUpdatehoursInput {
  set: [String!]
}

input ServiceTimeUpdateInput {
  hours: ServiceTimeUpdatehoursInput
  days: ServiceTimeUpdatedaysInput
  menu: MenuUpdateOneWithoutServiceTimesInput
}

input ServiceTimeUpdateManyDataInput {
  hours: ServiceTimeUpdatehoursInput
  days: ServiceTimeUpdatedaysInput
}

input ServiceTimeUpdateManyMutationInput {
  hours: ServiceTimeUpdatehoursInput
  days: ServiceTimeUpdatedaysInput
}

input ServiceTimeUpdateManyWithoutMenuInput {
  create: [ServiceTimeCreateWithoutMenuInput!]
  delete: [ServiceTimeWhereUniqueInput!]
  connect: [ServiceTimeWhereUniqueInput!]
  set: [ServiceTimeWhereUniqueInput!]
  disconnect: [ServiceTimeWhereUniqueInput!]
  update: [ServiceTimeUpdateWithWhereUniqueWithoutMenuInput!]
  upsert: [ServiceTimeUpsertWithWhereUniqueWithoutMenuInput!]
  deleteMany: [ServiceTimeScalarWhereInput!]
  updateMany: [ServiceTimeUpdateManyWithWhereNestedInput!]
}

input ServiceTimeUpdateManyWithWhereNestedInput {
  where: ServiceTimeScalarWhereInput!
  data: ServiceTimeUpdateManyDataInput!
}

input ServiceTimeUpdateWithoutMenuDataInput {
  hours: ServiceTimeUpdatehoursInput
  days: ServiceTimeUpdatedaysInput
}

input ServiceTimeUpdateWithWhereUniqueWithoutMenuInput {
  where: ServiceTimeWhereUniqueInput!
  data: ServiceTimeUpdateWithoutMenuDataInput!
}

input ServiceTimeUpsertWithWhereUniqueWithoutMenuInput {
  where: ServiceTimeWhereUniqueInput!
  update: ServiceTimeUpdateWithoutMenuDataInput!
  create: ServiceTimeCreateWithoutMenuInput!
}

input ServiceTimeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  menu: MenuWhereInput
  AND: [ServiceTimeWhereInput!]
  OR: [ServiceTimeWhereInput!]
  NOT: [ServiceTimeWhereInput!]
}

input ServiceTimeWhereUniqueInput {
  id: ID
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  menu(where: MenuSubscriptionWhereInput): MenuSubscriptionPayload
  menuCategory(where: MenuCategorySubscriptionWhereInput): MenuCategorySubscriptionPayload
  menuItem(where: MenuItemSubscriptionWhereInput): MenuItemSubscriptionPayload
  openingTime(where: OpeningTimeSubscriptionWhereInput): OpeningTimeSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  optionItem(where: OptionItemSubscriptionWhereInput): OptionItemSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderItem(where: OrderItemSubscriptionWhereInput): OrderItemSubscriptionPayload
  orderItemOption(where: OrderItemOptionSubscriptionWhereInput): OrderItemOptionSubscriptionPayload
  orderItemOptionItem(where: OrderItemOptionItemSubscriptionWhereInput): OrderItemOptionItemSubscriptionPayload
  paymentMethod(where: PaymentMethodSubscriptionWhereInput): PaymentMethodSubscriptionPayload
  restaurant(where: RestaurantSubscriptionWhereInput): RestaurantSubscriptionPayload
  serviceTime(where: ServiceTimeSubscriptionWhereInput): ServiceTimeSubscriptionPayload
}
`